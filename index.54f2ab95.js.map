{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar table = document.querySelector(\"tbody\");\nvar button = document.querySelector(\".button\");\nvar startMessage = document.querySelector(\".message-start\");\nvar loseMessage = document.querySelector(\".message-lose\");\nvar winMessage = document.querySelector(\".message-win\");\nvar gameScore = document.querySelector(\".game-score\");\nvar rowsCount = 4;\nvar colsCount = 4;\nvar field;\nvar score;\nbutton.addEventListener(\"click\", function() {\n    if (button.classList.contains(\"start\")) {\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        button.textContent = \"Restart\";\n        startMessage.classList.add(\"hidden\");\n    } else {\n        loseMessage.classList.add(\"hidden\");\n        winMessage.classList.add(\"hidden\");\n    }\n    field = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    score = 0;\n    gameScore.textContent = score;\n    addRandomCell();\n    addRandomCell();\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    var oldField = deepCopyArray(field);\n    if (!isMoved(moveDirection(oldField, \"up\")) && !isMoved(moveDirection(oldField, \"down\")) && !isMoved(moveDirection(oldField, \"right\")) && !isMoved(moveDirection(oldField, \"left\"))) {\n        loseMessage.classList.remove(\"hidden\");\n        return false;\n    }\n    switch(e.key){\n        case \"ArrowUp\":\n            field = deepCopyArray(moveDirection(field, \"up\"));\n            break;\n        case \"ArrowDown\":\n            field = deepCopyArray(moveDirection(field, \"down\"));\n            break;\n        case \"ArrowRight\":\n            field = deepCopyArray(moveDirection(field, \"right\"));\n            break;\n        case \"ArrowLeft\":\n            field = deepCopyArray(moveDirection(field, \"left\"));\n            break;\n    }\n    if (isMoved(oldField)) {\n        addRandomCell();\n        gameScore.textContent = \"\".concat(score);\n    }\n    if (isWin()) winMessage.classList.remove(\"hidden\");\n});\nfunction isWin() {\n    for(var i = 0; i < rowsCount; i++)for(var j = 0; j < colsCount; j++){\n        if (field[i][j] === 2048) return true;\n    }\n    return false;\n}\nfunction deepCopyArray(arr) {\n    return JSON.parse(JSON.stringify(arr));\n}\nfunction isMoved(oldField) {\n    for(var i = 0; i < rowsCount; i++)for(var j = 0; j < colsCount; j++){\n        if (oldField[i][j] !== field[i][j]) return true;\n    }\n    return false;\n}\nfunction moveDirection(inputField, direction) {\n    var movedField = deepCopyArray(inputField);\n    for(var i = 0; i < rowsCount; i++){\n        var newLine = void 0;\n        if (direction === \"up\" || direction === \"down\") newLine = [\n            movedField[0][i],\n            movedField[1][i],\n            movedField[2][i],\n            movedField[3][i]\n        ];\n        else if (direction === \"left\" || direction === \"right\") newLine = movedField[i];\n        if (direction === \"up\" || direction === \"left\") newLine = move(newLine.reverse()).reverse();\n        else if (direction === \"down\" || direction === \"right\") newLine = move(newLine);\n        for(var j = 0; j < newLine.length; j++){\n            if (direction === \"up\" || direction === \"down\") movedField[j][i] = newLine[j];\n            else if (direction === \"left\" || direction === \"right\") movedField[i][j] = newLine[j];\n        }\n    }\n    return movedField;\n}\nfunction move(array) {\n    var movedArr = zerosInStart(array);\n    for(var i = movedArr.length; i > 0; i--)if (movedArr[i] === movedArr[i - 1]) {\n        movedArr[i] += movedArr[i];\n        score += movedArr[i];\n        movedArr[i - 1] = 0;\n    }\n    return zerosInStart(movedArr);\n}\nfunction zerosInStart(array) {\n    var movedArr = array.filter(function(cell) {\n        return cell !== 0;\n    });\n    var startIndex = movedArr.length;\n    for(var i = startIndex; i < array.length; i++)movedArr.unshift(0);\n    return movedArr;\n}\nfunction addRandomCell() {\n    while(true){\n        var rowIndex = Math.floor(Math.random() * rowsCount);\n        var colIndex = Math.floor(Math.random() * colsCount);\n        if (field[rowIndex][colIndex] === 0) {\n            field[rowIndex][colIndex] = Math.random() >= 0.9 ? 4 : 2;\n            break;\n        }\n    }\n    renderField();\n}\nfunction renderField() {\n    for(var i = 0; i < rowsCount; i++)for(var j = 0; j < colsCount; j++){\n        table.rows[i].cells[j].className = \"\";\n        table.rows[i].cells[j].classList.add(\"field-cell\");\n        table.rows[i].cells[j].classList.add(\"field-cell--\".concat(field[i][j]));\n        table.rows[i].cells[j].textContent = field[i][j] || \"\";\n    }\n}\n\n//# sourceMappingURL=index.54f2ab95.js.map\n","'use strict';\n\nconst table = document.querySelector('tbody');\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nconst rowsCount = 4;\nconst colsCount = 4;\nlet field;\nlet score;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  gameScore.textContent = score;\n\n  addRandomCell();\n  addRandomCell();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const oldField = deepCopyArray(field);\n\n  if (\n    !isMoved(moveDirection(oldField, 'up'))\n    && !isMoved(moveDirection(oldField, 'down'))\n    && !isMoved(moveDirection(oldField, 'right'))\n    && !isMoved(moveDirection(oldField, 'left'))\n  ) {\n    loseMessage.classList.remove('hidden');\n\n    return false;\n  }\n\n  switch (e.key) {\n    case 'ArrowUp':\n      field = deepCopyArray(moveDirection(field, 'up'));\n      break;\n    case 'ArrowDown':\n      field = deepCopyArray(moveDirection(field, 'down'));\n      break;\n    case 'ArrowRight':\n      field = deepCopyArray(moveDirection(field, 'right'));\n      break;\n    case 'ArrowLeft':\n      field = deepCopyArray(moveDirection(field, 'left'));\n      break;\n  }\n\n  if (isMoved(oldField)) {\n    addRandomCell();\n    gameScore.textContent = `${score}`;\n  }\n\n  if (isWin()) {\n    winMessage.classList.remove('hidden');\n  }\n});\n\nfunction isWin() {\n  for (let i = 0; i < rowsCount; i++) {\n    for (let j = 0; j < colsCount; j++) {\n      if (field[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction deepCopyArray(arr) {\n  return JSON.parse(JSON.stringify(arr));\n}\n\nfunction isMoved(oldField) {\n  for (let i = 0; i < rowsCount; i++) {\n    for (let j = 0; j < colsCount; j++) {\n      if (oldField[i][j] !== field[i][j]) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveDirection(inputField, direction) {\n  const movedField = deepCopyArray(inputField);\n\n  for (let i = 0; i < rowsCount; i++) {\n    let newLine;\n\n    if (direction === 'up' || direction === 'down') {\n      newLine = [\n        movedField[0][i],\n        movedField[1][i],\n        movedField[2][i],\n        movedField[3][i],\n      ];\n    } else if (direction === 'left' || direction === 'right') {\n      newLine = movedField[i];\n    }\n\n    if (direction === 'up' || direction === 'left') {\n      newLine = move(newLine.reverse()).reverse();\n    } else if (direction === 'down' || direction === 'right') {\n      newLine = move(newLine);\n    }\n\n    for (let j = 0; j < newLine.length; j++) {\n      if (direction === 'up' || direction === 'down') {\n        movedField[j][i] = newLine[j];\n      } else if (direction === 'left' || direction === 'right') {\n        movedField[i][j] = newLine[j];\n      }\n    }\n  }\n\n  return movedField;\n}\n\nfunction move(array) {\n  const movedArr = zerosInStart(array);\n\n  for (let i = movedArr.length; i > 0; i--) {\n    if (movedArr[i] === movedArr[i - 1]) {\n      movedArr[i] += movedArr[i];\n      score += movedArr[i];\n      movedArr[i - 1] = 0;\n    }\n  }\n\n  return zerosInStart(movedArr);\n}\n\nfunction zerosInStart(array) {\n  const movedArr = array.filter((cell) => cell !== 0);\n  const startIndex = movedArr.length;\n\n  for (let i = startIndex; i < array.length; i++) {\n    movedArr.unshift(0);\n  }\n\n  return movedArr;\n}\n\nfunction addRandomCell() {\n  while (true) {\n    const rowIndex = Math.floor(Math.random() * rowsCount);\n    const colIndex = Math.floor(Math.random() * colsCount);\n\n    if (field[rowIndex][colIndex] === 0) {\n      field[rowIndex][colIndex] = Math.random() >= 0.9 ? 4 : 2;\n      break;\n    }\n  }\n\n  renderField();\n}\n\nfunction renderField() {\n  for (let i = 0; i < rowsCount; i++) {\n    for (let j = 0; j < colsCount; j++) {\n      table.rows[i].cells[j].className = '';\n      table.rows[i].cells[j].classList.add('field-cell');\n      table.rows[i].cells[j].classList.add(`field-cell--${field[i][j]}`);\n      table.rows[i].cells[j].textContent = field[i][j] || '';\n    }\n  }\n}\n"],"names":["field","score","table","document","querySelector","button","startMessage","loseMessage","winMessage","gameScore","deepCopyArray","arr","JSON","parse","stringify","isMoved","oldField","i","j","moveDirection","inputField","direction","movedField","newLine","move","reverse","length","array","movedArr","zerosInStart","filter","cell","startIndex","unshift","addRandomCell","rowIndex","Math","floor","random","colIndex","renderField","rows","cells","className","classList","add","concat","textContent","addEventListener","contains","remove","e","key","isWin"],"version":3,"file":"index.54f2ab95.js.map"}